{"version":3,"sources":["SymbolForm.js","utils.js","StockChart.js","RangeButtons.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","value","react_default","a","createElement","className","main","name","label","pattern","minLength","required","onChange","evt","target","Component","serverUrl","getData","obj","Date","concat","date","getTime","Close","close","Volume","volume","Open","open","High","high","Low","low","CustomStockChart","stockData","processedStockData","map","from","to","length","es_main","text","company","symbol","data","type","openField","closeField","lowField","highField","categoryField","field","ButtonGroupContainer","handleClickOneMonth","handleClick","handleClickSixMonths","handleClickOneYear","console","log","dist_es_main","togglable","selected","onClick","range","App","state","stocksData","handleChangeSymbol","handleClickRange","updateStockData","setState","_this$state","quote","companyName","undefined","chart","SymbolForm","onSubmit","handleSubmitSymbol","src_RangeButtons","StockChart","_this2","_this$state2","url","fetch","then","response","json","catch","error","fetchStocksData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21d48cf5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input } from \"@progress/kendo-react-inputs\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <form className=\"k-form\">\n        <Input\n          name=\"symbol\"\n          label=\"Company's symbol\"\n          pattern={\"[A-Z]{1,4}\"}\n          minLength={1}\n          required={true}\n          value={value}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n\n  handleChange(evt) {\n    const { onChange } = this.props;\n    const symbol = evt.target.value;\n    onChange(symbol);\n  }\n}\n\nexport default Form;\n","const serverUrl = \"https://stock-chart-server.herokuapp.com/\";\n\nexport function fetchStocksData(companyName, range) {\n  const url = `${serverUrl}?companyName=${companyName}&range=${range}`;\n\n  return fetch(url)\n    .then(response => {\n      return response.json();\n    })\n    .catch(error => {\n      console.error(\"Could not fetch stock data\", error);\n    });\n}\n\nexport function getData(obj) {\n  return {\n    Date: `/Date(${new Date(obj.date).getTime()})/`,\n    Close: obj.close,\n    Volume: obj.volume,\n    Open: obj.open,\n    High: obj.high,\n    Low: obj.low\n  };\n}\n","import React from \"react\";\n\nimport {\n  StockChart,\n  ChartTitle,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartNavigator,\n  ChartNavigatorSelect,\n  ChartNavigatorSeries,\n  ChartNavigatorSeriesItem\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { getData } from \"./utils\";\n\nconst CustomStockChart = props => {\n  const { stockData } = props;\n  const processedStockData = stockData.map(getData);\n\n  const from = new Date(stockData[0].date);\n  const to = new Date(stockData[stockData.length - 1].date);\n\n  return (\n    <StockChart>\n      <ChartTitle text={`${props.company} - ${props.symbol}`} />\n      <ChartSeries>\n        <ChartSeriesItem\n          data={processedStockData}\n          type=\"candlestick\"\n          openField=\"Open\"\n          closeField=\"Close\"\n          lowField=\"Low\"\n          highField=\"High\"\n          categoryField=\"Date\"\n        />\n      </ChartSeries>\n      <ChartNavigator>\n        <ChartNavigatorSelect from={from} to={to} />\n        <ChartNavigatorSeries>\n          <ChartNavigatorSeriesItem\n            data={processedStockData}\n            type=\"area\"\n            field=\"Close\"\n            categoryField=\"Date\"\n          />\n        </ChartNavigatorSeries>\n      </ChartNavigator>\n    </StockChart>\n  );\n};\n\nexport default CustomStockChart;\n","import React, { Component } from \"react\";\nimport { Button, ButtonGroup } from \"@progress/kendo-react-buttons\";\n\nimport \"./RangeButtons.css\";\n\nclass ButtonGroupContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClickOneMonth = this.handleClick.bind(this, \"1m\");\n    this.handleClickSixMonths = this.handleClick.bind(this, \"6m\");\n    this.handleClickOneYear = this.handleClick.bind(this, \"1y\");\n  }\n\n  render() {\n    const { value } = this.props;\n    console.log(value);\n\n    return (\n      <div className=\"RangeButtons\">\n        <ButtonGroup>\n          <Button\n            togglable={true}\n            selected={value === \"1m\"}\n            onClick={this.handleClickOneMonth}\n          >\n            1 month\n          </Button>\n          <Button\n            togglable={true}\n            selected={value === \"6m\"}\n            onClick={this.handleClickSixMonths}\n          >\n            6 months\n          </Button>\n          <Button\n            togglable={true}\n            selected={value === \"1y\"}\n            onClick={this.handleClickOneYear}\n          >\n            1 year\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n\n  handleClick(range) {\n    const { onClick } = this.props;\n    onClick(range);\n  }\n}\n\nexport default ButtonGroupContainer;\n","import React, { Component } from \"react\";\nimport SymbolForm from \"./SymbolForm\";\nimport StockChart from \"./StockChart\";\nimport RangeButtons from \"./RangeButtons\";\nimport { fetchStocksData } from \"./utils\";\nimport \"@progress/kendo-theme-material/dist/all.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stocksData: {},\n      symbol: \"\",\n      range: \"1m\"\n    };\n\n    this.handleChangeSymbol = this.handleChangeSymbol.bind(this);\n    this.handleClickRange = this.handleClickRange.bind(this);\n    this.updateStockData = this.updateStockData.bind(this);\n  }\n\n  handleChangeSymbol(symbol) {\n    this.setState({ symbol }, this.updateStockData);\n  }\n\n  handleClickRange(range) {\n    this.setState({ range }, this.updateStockData);\n  }\n\n  render() {\n    const { symbol, range, stocksData } = this.state;\n\n    const company = stocksData[symbol]\n      ? stocksData[symbol].quote.companyName\n      : undefined;\n\n    const stockData = stocksData[symbol] ? stocksData[symbol].chart : undefined;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SymbolForm\n            value={symbol}\n            onChange={this.handleChangeSymbol}\n            onSubmit={this.handleSubmitSymbol}\n          />\n          <RangeButtons value={range} onClick={this.handleClickRange} />\n        </header>\n        {symbol && company && stockData && (\n          <div className=\"App-chart\">\n            <StockChart\n              symbol={symbol}\n              company={company}\n              stockData={stockData}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  updateStockData() {\n    const { symbol, range } = this.state;\n\n    fetchStocksData(symbol, range).then(stocksData => {\n      this.setState({ stocksData });\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}