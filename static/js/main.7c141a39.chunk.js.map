{"version":3,"sources":["SymbolForm.js","utils.js","StockChart.js","RangeButtons.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","value","react_default","a","createElement","className","main","name","label","pattern","required","onChange","evt","target","Component","serverUrl","massageData","obj","Date","concat","date","getTime","Close","close","Volume","volume","Open","open","High","high","Low","low","CustomStockChart","data","massagedData","map","from","to","length","es_main","text","company","symbol","type","openField","closeField","lowField","highField","categoryField","field","ButtonGroupContainer","handleClickOneMonth","handleClick","handleClickThreeMonths","handleClickSixMonths","handleClickOneYear","handleClickTwoYears","handleClickFiveYears","dist_es_main","title","togglable","selected","onClick","range","App","state","stockData","handleChangeSymbol","handleClickRange","updateStockData","setState","_this$state","quote","companyName","undefined","chartData","chart","SymbolForm","onSubmit","handleSubmitSymbol","src_RangeButtons","StockChart","href","_this2","_this$state2","url","fetch","then","response","json","fetchData","catch","err","console","error","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c141a39.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input } from \"@progress/kendo-react-inputs\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <form className=\"k-form\">\n        <Input\n          name=\"symbol\"\n          label=\"Company's symbol\"\n          pattern={\"[A-Za-z-]{1,4}\"}\n          required={true}\n          value={value}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n\n  handleChange(evt) {\n    const { onChange } = this.props;\n    const symbol = evt.target.value;\n    onChange(symbol);\n  }\n}\n\nexport default Form;\n","const serverUrl = \"https://stock-chart-proxy.herokuapp.com/\";\n\nexport function fetchData(symbol, range) {\n  const url = `${serverUrl}?symbol=${symbol}&range=${range}`;\n\n  return fetch(url).then(response => response.json());\n}\n\nexport function massageData(obj) {\n  return {\n    Date: `/Date(${new Date(obj.date).getTime()})/`,\n    Close: obj.close,\n    Volume: obj.volume,\n    Open: obj.open,\n    High: obj.high,\n    Low: obj.low\n  };\n}\n","import React from \"react\";\n\nimport {\n  StockChart,\n  ChartTitle,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartNavigator,\n  ChartNavigatorSelect,\n  ChartNavigatorSeries,\n  ChartNavigatorSeriesItem\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { massageData } from \"./utils\";\n\nconst CustomStockChart = props => {\n  const { data } = props;\n  const massagedData = data.map(massageData);\n\n  const from = new Date(data[0].date);\n  const to = new Date(data[data.length - 1].date);\n\n  return (\n    <StockChart>\n      <ChartTitle text={`${props.company} - ${props.symbol}`} />\n      <ChartSeries>\n        <ChartSeriesItem\n          data={massagedData}\n          type=\"candlestick\"\n          openField=\"Open\"\n          closeField=\"Close\"\n          lowField=\"Low\"\n          highField=\"High\"\n          categoryField=\"Date\"\n        />\n      </ChartSeries>\n      <ChartNavigator>\n        <ChartNavigatorSelect from={from} to={to} />\n        <ChartNavigatorSeries>\n          <ChartNavigatorSeriesItem\n            data={massagedData}\n            type=\"area\"\n            field=\"Close\"\n            categoryField=\"Date\"\n          />\n        </ChartNavigatorSeries>\n      </ChartNavigator>\n    </StockChart>\n  );\n};\n\nexport default CustomStockChart;\n","import React, { Component } from \"react\";\nimport { Button, ButtonGroup } from \"@progress/kendo-react-buttons\";\n\nimport \"./RangeButtons.css\";\n\nclass ButtonGroupContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClickOneMonth = this.handleClick.bind(this, \"1m\");\n    this.handleClickThreeMonths = this.handleClick.bind(this, \"3m\");\n    this.handleClickSixMonths = this.handleClick.bind(this, \"6m\");\n    this.handleClickOneYear = this.handleClick.bind(this, \"1y\");\n    this.handleClickTwoYears = this.handleClick.bind(this, \"2y\");\n    this.handleClickFiveYears = this.handleClick.bind(this, \"5y\");\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <div className=\"RangeButtons\">\n        <ButtonGroup>\n          <Button\n            title=\"1 month\"\n            togglable={true}\n            selected={value === \"1m\"}\n            onClick={this.handleClickOneMonth}\n          >\n            1M\n          </Button>\n          <Button\n            title=\"3 months\"\n            togglable={true}\n            selected={value === \"3m\"}\n            onClick={this.handleClickThreeMonths}\n          >\n            3M\n          </Button>\n          <Button\n            title=\"6 months\"\n            togglable={true}\n            selected={value === \"6m\"}\n            onClick={this.handleClickSixMonths}\n          >\n            6M\n          </Button>\n          <Button\n            title=\"1 year\"\n            togglable={true}\n            selected={value === \"1y\"}\n            onClick={this.handleClickOneYear}\n          >\n            1Y\n          </Button>\n          <Button\n            title=\"2 years\"\n            togglable={true}\n            selected={value === \"2y\"}\n            onClick={this.handleClickTwoYears}\n          >\n            2Y\n          </Button>\n          <Button\n            title=\"5 years\"\n            togglable={true}\n            selected={value === \"5y\"}\n            onClick={this.handleClickFiveYears}\n          >\n            5Y\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n\n  handleClick(range) {\n    const { onClick } = this.props;\n    onClick(range);\n  }\n}\n\nexport default ButtonGroupContainer;\n","import React, { Component } from \"react\";\nimport SymbolForm from \"./SymbolForm\";\nimport StockChart from \"./StockChart\";\nimport RangeButtons from \"./RangeButtons\";\nimport { fetchData } from \"./utils\";\nimport \"@progress/kendo-theme-material/dist/all.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      symbol: \"\",\n      range: \"1m\",\n      stockData: {}\n    };\n\n    this.handleChangeSymbol = this.handleChangeSymbol.bind(this);\n    this.handleClickRange = this.handleClickRange.bind(this);\n    this.updateStockData = this.updateStockData.bind(this);\n  }\n\n  handleChangeSymbol(symbol) {\n    this.setState({ symbol }, this.updateStockData);\n  }\n\n  handleClickRange(range) {\n    this.setState({ range }, this.updateStockData);\n  }\n\n  render() {\n    const { symbol, range, stockData } = this.state;\n\n    const company = stockData[symbol]\n      ? stockData[symbol].quote.companyName\n      : undefined;\n\n    const chartData = stockData[symbol] ? stockData[symbol].chart : undefined;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SymbolForm\n            value={symbol}\n            onChange={this.handleChangeSymbol}\n            onSubmit={this.handleSubmitSymbol}\n          />\n          <RangeButtons value={range} onClick={this.handleClickRange} />\n        </header>\n        {symbol && company && chartData && (\n          <div className=\"App-chart\">\n            <StockChart symbol={symbol} company={company} data={chartData} />\n            <p>\n              Data provided for free by{\" \"}\n              <a href=\"https://iextrading.com/developer/\">IEX</a>. View{\" \"}\n              <a href=\"https://iextrading.com/api-exhibit-a/\">\n                IEX’s Terms of Use\n              </a>\n              .\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  updateStockData() {\n    const { symbol, range } = this.state;\n\n    if (!symbol || !range) {\n      return;\n    }\n\n    fetchData(symbol, range)\n      .then(stockData => {\n        this.setState({ stockData });\n      })\n      .catch(err => {\n        console.error(\"Could not fetch stock data:\", err);\n      });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}